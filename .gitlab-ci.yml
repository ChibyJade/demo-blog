# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/PHP.gitlab-ci.yml
stages:
  - build
  - test
  - deploy

default:
  cache:
    paths:
    - vendor/

build-php:
  stage: "build"
  only:
    - master
  artifacts:
    paths:
      - ./
  image: chibyjade/php-8.0:latest   
  script:
    - composer install --no-dev --optimize-autoloader
    - mkdir -p var && chmod -R 777 var

build-js:
  stage: "build"
  only:
    - master
  artifacts:
    paths:
      - ./
  image: node:current-alpine3.15
  script:
    - export NODE_OPTIONS=--openssl-legacy-provider
    - yarn install
    - yarn build
    - rm -r node_modules

build-docker:
  stage: "build"
  only:
    - master
  image: docker:20.10.12-alpine3.15
  services:
    - docker:20.10.12-dind-alpine3.15
  variables:
    IMAGE_NAME: chibyjade/demo
    IMAGE_TAG: ${CI_PIPELINE_ID}
    APP_VERSION: ${IMAGE_TAG}
    GIT_COMMIT: ${CI_COMMIT_SHA}
  script:
    - echo ${DOCKER_PWD} | docker login -u ${DOCKER_LOGIN} --password-stdin
    - docker info
    - docker build -t ${IMAGE_NAME}:${IMAGE_TAG} --build-arg APP_VERSION=${APP_VERSION} --build-arg GIT_COMMIT=${GIT_COMMIT} .
    - chmod +x ./ci/docker-tag.sh && ./ci/docker-tag.sh
    - docker push ${IMAGE_NAME}

# Bring in any services we need http://docs.gitlab.com/ee/ci/docker/using_docker_images.html#what-is-a-service
# See http://docs.gitlab.com/ee/ci/services/README.html for examples.
# services:
#   - mysql:5.7

# Set any variables we need
variables:
  # Configure mysql environment variables (https://hub.docker.com/r/_/mysql/)
  # MYSQL_DATABASE: mysql_database
  # MYSQL_ROOT_PASSWORD: mysql_strong_password

# Run our tests
# If Xdebug was installed you can generate a coverage report and see code coverage metrics.
test:
  stage: "test"
  only:
    - master
  image: chibyjade/php-8.0:latest
  needs: ["build-php"]
  script:
    - export APP_ENV=test
    - composer install --optimize-autoloader
    - chmod +x -R bin
    - bin/phpunit --coverage-text --colors=never

deploy:
  stage: "deploy"
  only:
    - master
  script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - '[[ -f /.dockerenv ]] && echo -e "Host *\nStrictHostKeyChecking no\n" > ~/.ssh/config'
    - ssh-add <(echo "$DEPLOYER_PK")
    - scp -p ci/docker-compose.yml $DEPLOYER_USERNAME@$PRODUCTION_SERVER_IP:$PRODUCTION_SERVER_PATH
    - scp -p ci/deploy.sh $DEPLOYER_USERNAME@$PRODUCTION_SERVER_IP:$PRODUCTION_SERVER_PATH
    - ssh $DEPLOYER_USERNAME@$PRODUCTION_SERVER_IP "cd $PRODUCTION_SERVER_PATH && export APP_MAINTENANCE=$APP_MAINTENANCE && export APP_ENV=$APP_ENV && ./deploy.sh"